<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>More Code, More Problems</title><link>https://rrx.github.io/</link><description>Recent content on More Code, More Problems</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 15 Mar 2023 19:41:02 -0700</lastBuildDate><atom:link href="https://rrx.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>New code base, where to start?</title><link>https://rrx.github.io/posts/2023-03-15-new-code-base/</link><pubDate>Wed, 15 Mar 2023 19:41:02 -0700</pubDate><guid>https://rrx.github.io/posts/2023-03-15-new-code-base/</guid><description>&lt;p>At work, I&amp;rsquo;ve started working on a new code base. This has me thinking about the best way do this.
Code can sometimes be a real pain. You aren&amp;rsquo;t just inheriting all the good stuff, you also take on
all of the short cuts and half finished features that make up the technical debt of the project. A
new code base is a package, you don&amp;rsquo;t get to choose only the good parts. So where to start?&lt;/p></description></item><item><title>Reloading like it's 1972</title><link>https://rrx.github.io/posts/2023-02-13-hotreloading/</link><pubDate>Mon, 13 Feb 2023 00:00:00 -0800</pubDate><guid>https://rrx.github.io/posts/2023-02-13-hotreloading/</guid><description>&lt;p>TL;DR Here&amp;rsquo;s a sketch of a solution for hot-reloading that I hope will bring some greater flow to my
development process. Present day solutions are more about shipping the final product, than they are
about enjoying the process of coding. Hot-reloading is one of those features that once you have it,
you just don&amp;rsquo;t want to live without it again. So let&amp;rsquo;s get hot-reloading like it&amp;rsquo;s 1972!&lt;/p></description></item><item><title>Technical Debt, A Systems Level Problem</title><link>https://rrx.github.io/posts/2023-02-05-tech-debt/</link><pubDate>Sun, 05 Feb 2023 19:33:40 -0800</pubDate><guid>https://rrx.github.io/posts/2023-02-05-tech-debt/</guid><description>&lt;p>I just finished reading &lt;a href="https://dl.acm.org/doi/book/10.5555/3364312" target="_blank">&amp;ldquo;Managing Technical Debt&amp;rdquo;&lt;/a>, and while it provides some excellent ideas on the topic, I felt like it was missing something vital. The book focuses primarily on the technical side of the problem. The human factors however, are just as important. Not including them in our assessments is a major reason why we have so much trouble assessing the true cost of our technical debt. I think this omission is common in the industry, and I think it&amp;rsquo;s time to change that.&lt;/p></description></item><item><title>About this blog</title><link>https://rrx.github.io/about/</link><pubDate>Mon, 21 Nov 2022 19:33:40 -0800</pubDate><guid>https://rrx.github.io/about/</guid><description>Some thoughts on software development.
My name is Ryan Sadler and I&amp;rsquo;m a Staff Software Engineer at Reddit. You can find me on LinkedIn.
I&amp;rsquo;ve worked as a software developer for over 20 years now. Coding was always a hobby of mine. My first computer was a Commodore Vic20, with 3KB of RAM. It was simple enough I could figure it out how it worked at the hardware level. The manual that came with the computer was complete with schematics.
These days I like to code in Rust and Python. My latest project is a hotreloadable ELF linker. More details will hopefully find their way onto the blog.</description></item></channel></rss>